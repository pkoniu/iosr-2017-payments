#!/usr/bin/env node

require('dotenv').config();

const {
    MONGODB_URI,
    MONGO_HOST = 'localhost',
    MONGO_PORT = '27017',
    DB_NAME = 'iosr2017-payments',
    PORT = '3004',
    CLOUDAMQP_URL,
    AMQP_HOST = 'localhost',
    AMQP_PORT = '5672',
    AMQP_USER = 'admin',
    AMQP_PASSWORD = 'iosr2017',
    AMQP_QUEUE_NAME = 'orders-to-process',
    EUREKA_APP_NAME = 'payments',
    EUREKA_APP_HOST_NAME = 'localhost',
    EUREKA_APP_IP_ADDR = '127.0.0.1',
    EUREKA_APP_VIP_ADDR = 'localhost',
    EUREKA_SERVER_URL = 'https://user:iosr2017@iosr2017eureka-develop.herokuapp.com/eureka/apps'
} = process.env;

let server, port;

const MongoClient = require('mongodb').MongoClient;
const mongoUrl = createMongoUrl();
var mongodb;

const AMQP = require('amqplib');
const AMQPUrl = createAMQPUrl();
var amqpConn;
var amqpChannel;

const Eureka = require('eureka-js-client').Eureka;
const client = new Eureka({
      instance: {
        app: EUREKA_APP_NAME,
        hostName: EUREKA_APP_HOST_NAME,
        ipAddr: EUREKA_APP_IP_ADDR,
        port: normalizePort(PORT),
        vipAddress: EUREKA_APP_VIP_ADDR,
        dataCenterInfo: {
          name: 'MyOwn'
        },
        statusPageUrl: EUREKA_APP_HOST_NAME,
        healthCheckUrl: EUREKA_APP_HOST_NAME,
        homePageUrl: EUREKA_APP_HOST_NAME,
      },
      eureka: {
        serviceUrls: {
            default: [EUREKA_SERVER_URL]
        }
      },
    });

console.log(`Connecting to: ${mongoUrl}`);
MongoClient.connect(mongoUrl)
    .then(mongodbConn => {
        console.log(`Connected to db.`);
        mongodb = mongodbConn;
        console.log(`Connecting... to ${AMQPUrl}`);
        return AMQP.connect(AMQPUrl);
    })
    .then(amqpConnRes => {
        amqpConn = amqpConnRes;
        console.log(`Connected to amqp. Creating channel...`);
        return amqpConn.createChannel();
    })
    .then(amqpChannelRes => {
        amqpChannel = amqpChannelRes;
        console.log(`AMQP channel created, asserting queue...`);
        return amqpChannel.assertQueue(AMQP_QUEUE_NAME, {durable: true});
    })
    .then( (reply) => {
        console.log(`AMQP queue valid.`);
        const app = require('../src/app')(mongodb, {channel: amqpChannel, queue: AMQP_QUEUE_NAME});
        const debug = require('debug')('iosr-2017:server');
        const http = require('http');

        port = normalizePort(PORT);
        app.set('port', port);

        server = http.createServer(app);

        server.listen(port);
        server.on('error', onError);
        server.on('listening', onListening);
    })
    .catch(error => {
        console.log('Connecting failed.');
        console.log(error);
        process.exit(1);
    });

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    console.log('Listening on ' + bind);
    client.start();
}

function createMongoUrl() {
    const customUrl = `mongodb://${MONGO_HOST}:${MONGO_PORT}/${DB_NAME}`
    return MONGODB_URI || customUrl;
}

function createAMQPUrl() {
    const customUrl = `amqp://${AMQP_USER}:${AMQP_PASSWORD}@${AMQP_HOST}:${AMQP_PORT}/`
    return CLOUDAMQP_URL || customUrl;
}
